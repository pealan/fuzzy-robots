# -*- coding: utf-8 -*-
"""trab.

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19nS8HsZeAp6Yr9GHGdRSsiZfvRMGIixM
"""

import sys
sys.path.insert(0, '../src')
from robot import Robot
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

braitenbergL=[-0.2,-0.4,-0.6,-0.8,-1.0,-1.2,-1.4,-1.6]
braitenbergR=[-1.6,-1.4,-1.2,-1.0,-0.8,-0.6,-0.4,-0.2]

detect = [0,0,0,0,0,0,0,0]
noDetectionDist = 1.0
maxDetectionDist = 0.2

def braitenberg(dist, vel):
    """
        Control the robot movement by the distances read with the ultrassonic sensors. More info: https://en.wikipedia.org/wiki/Braitenberg_vehicle
        Args:
            dist: Ultrassonic distances list
            vel:  Max wheel velocities
    """
    vLeft = vRight = vel
    for i in range(len(dist)):
        if(dist[i] < noDetectionDist):
            detect[i] = 1 - ((dist[i]-maxDetectionDist)/(noDetectionDist-maxDetectionDist))
        else:
            detect[i]=0
        for i in range(8):
            vLeft = vLeft + braitenbergL[i]*detect[i]
            vRight = vRight+ braitenbergR[i]*detect[i]

    return [vLeft, vRight]

def wallFollow(dist, vel):
    vLeft = vRight = vel
    noDetect_min = 0.5
    noDetect_max = 1.0
    print(dist)
    for i in range(4):
        if(noDetect_min < dist[i] < noDetect_max):
            detect[i] = 1
        else:
            detect[i]=0
        for i in range(4):
            vLeft = vLeft + detect[i]*0.8
            vRight = vRight  - detect[i]*0.2
    for i in range(4, len(dist)):
        if(dist[i] < noDetect_min):
            detect[i] = 1
        else:
            detect[i]=0
        for i in range(4, 8):
            vLeft = vLeft + detect[i]*0.4
            vRight = vRight  - detect[i]*0.2

    return [vLeft, vRight]

def fuzzy(dist, vel):
  distance = crtl.Antecedent(np.arange(), 'distance')
  velocity = ctrl.Consequence(vel, 'velocity')
  distance['low'] = fuzz.trimf(dist, [0, 0, 0.3])
  distance['medium'] = fuzz.trimf(dist, [0, 0.3, 0.5])
  distance['high'] = fuzz.trimf(dist, [0.3, 0.5, 0.5]) 
  
robot = Robot()
while(robot.get_connection_status() != -1):
    us_distances = robot.read_ultrassonic_sensors()
    #vel = braitenberg(us_distances[:8], 3) #Using only the 8 frontal sensors
    vel = wallFollow(us_distances[:8], 3)
    robot.set_left_velocity(vel[0])
    robot.set_right_velocity(vel[1])